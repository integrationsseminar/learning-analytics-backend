openapi: 3.0.0
servers:
  - url: https://api.learning-analytics.gang-of-fork.de
info:
  description: 'Learning Analytics API Documentation'
  version: '1.0.0'
  title: 'Learning Analytics API '
  contact:
    email: 'support@gang-of-fork.de'
tags:
- name: auth
  description: 'Routes about authentication'
- name: users
  description: 'Routes about users'
- name: threads
  description: 'Routes about threads (representing conversations)'
- name: threadcomments
  description: 'Routes about threadcomments'
- name: courses
  description: 'Routes for Courses'
- name: surveys
  description: 'Routes for surveys'
- name: notifications
  description: 'Routes about notifications'
- name: misc
  description: 'Miscellaneous routes'
- name: trophys
  description: 'Routes for trophys'
- name: usertrophys
  description: 'Routes for usertrophys'
  
paths:
  /ping:
    get:
      tags: 
        - misc
      summary: 'Check if application is up'
      responses:
        200:
          description: 'Application is up'
          content:
            application/json:
              schema:
                type: object
                properties: 
                  msg:
                    type: string
                    example: pong
              
  /notifications:
    get: 
      tags: 
        - notifications
      security: 
        - bearerJWT: []
      summary: 'Get Notifications (Odatafy)'
      responses: 
        200:
          description: '<b>Authorization: Bearer \<JWT\></b> must be set<br>Minimum Role: Student<br>Route is odatafy compatible, documentation and examples can be found <a href=http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_QueryOptions>here</a>'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count: 
                    type: number
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notification'
                
  
  /auth/register/{courseId}:
    post:
      tags:
      - auth
      parameters:
      - in: path
        name: courseId
        required: true
        schema:
          type: string
      summary: 'Create a new user (student) and assign to a course'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: 'User created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
                
  /auth/login/{courseId}:
    post:
      tags:
      - auth
      parameters:
      - in: path
        name: courseId
        required: true
        schema:
          type: string
      summary: 'Login a user and assign to a course'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: 
                email: 
                  type: string
                password: 
                  type: string
      responses:
        200:
          description: 'User logged in'
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                  token: 
                    type: object
                    properties:
                      expiresIn: 
                        type: number
                      token: 
                        type: string
                        format: JWT
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MzUyOTMzOTE4ZmI3OWQzNGNmODk4ZjIiLCJyb2xlIjoiU3R1ZGVudCIsImlhdCI6MTY2NjM1Njg5NSwiZXhwIjoxNjY2MzcxMjk1fQ.2-sxoJ7lKMFh5Tu3r8lH07jpw6He8-KXznQh8wK7-lw
                        
  /auth/login:
    post:
      tags:
      - auth
      summary: 'Login a user'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: 
                email: 
                  type: string
                password: 
                  type: string
      responses:
        200:
          description: 'User logged in'
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                  token: 
                    type: object
                    properties:
                      expiresIn: 
                        type: number
                      token: 
                        type: string
                        format: JWT
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MzUyOTMzOTE4ZmI3OWQzNGNmODk4ZjIiLCJyb2xlIjoiU3R1ZGVudCIsImlhdCI6MTY2NjM1Njg5NSwiZXhwIjoxNjY2MzcxMjk1fQ.2-sxoJ7lKMFh5Tu3r8lH07jpw6He8-KXznQh8wK7-lw
      
  /users:              
    get:
      tags:
      - users
      summary: 'Get Users (Odatafy)'
      description: '<b>Authorization: Bearer \<JWT\></b> must be set<br>Minimum Role: Admin<br>Route is odatafy compatible, documentation and examples can be found <a href=http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_QueryOptions>here</a>'
      security: 
        - bearerJWT: []
      responses:
        200:
          description: 'Users'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count: 
                    type: number
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                        
  /users/my: 
    get:
      tags:
      - users
      summary: 'Get Logged In User'
      description: '<b>Authorization: Bearer \<JWT\></b> must be set<br>Minimum Role: Student'
      security: 
        - bearerJWT: []
      responses:
        200:
          description: 'User'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
      - users
      summary: 'Update a User'
      description: '<b>Authorization: Bearer \<JWT\></b> must be set<br>Minimum Role: Student'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: 'User updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
                  
  /users/{userId}:
    delete:
      tags:
      - users
      summary: 'Delete a single User'
      parameters: 
        - in: path
          name: userId
          required: true
          schema:
            type: string
            format: ObjectId
      description: '<b>Authorization: Bearer \<JWT\></b> must be set<br>Minimum Role: Admin'
      security: 
        - bearerJWT: []
      responses:
        204:
          description: 'User deleted'
        
  
  # Thread Routes CRUD Controller
  /threads:
    get:
      tags:
      - threads
      summary: 'Get Threads (Odatafy)'
      description: '<b>Authorization: Bearer \<JWT\></b> must be set<br>Minimum Role: Student<br>Route is odatafy compatible, documentation and examples can be found <a href=http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_QueryOptions>here</a>'
      security: 
        - bearerJWT: []
      responses:
        200:
          description: 'Threads'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count: 
                    type: number
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Thread'
                
    post:
      tags:
      - threads
      summary: 'Create a new Thread'
      description: '<b>Authorization: Bearer \<JWT\></b> must be set<br>Minimum Role: Student'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Thread'
      responses:
        201:
          description: 'Thread created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thread'
                
  /threads/{threadId}:
    get:
      tags:
      - threads
      summary: 'Get a single Thread'
      parameters: 
        - in: path
          name: threadId
          required: true
          schema:
            type: string
            format: ObjectId
      description: '<b>Authorization: Bearer \<JWT\></b> must be set<br>Minimum Role: Student'
      security: 
        - bearerJWT: []
      responses:
        200:
          description: 'Thread'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thread'
                
    put:
      tags:
      - threads
      parameters: 
        - in: path
          name: threadId
          required: true
          schema:
            type: string
            format: ObjectId
      summary: 'Update a Thread'
      description: '<b>Authorization: Bearer \<JWT\></b> must be set<br>Minimum Role: Student<br>course is immutable'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Thread'
      responses:
        200:
          description: 'Thread updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thread'
                
    delete:
      tags:
      - threads
      summary: 'Delete a single thread'
      parameters: 
        - in: path
          name: threadId
          required: true
          schema:
            type: string
            format: ObjectId
      description: '<b>Authorization: Bearer \<JWT\></b> must be set<br>Minimum Role: Lecturer'
      security: 
        - bearerJWT: []
      responses:
        204:
          description: 'Thread deleted'
                
                
  # ThreadComment Routes CRUD Controller
  /threadcomments:
    get:
      tags:
      - threadcomments
      summary: 'Get ThreadComments (Odatafy)'
      description: '<b>Authorization: Bearer \<JWT\></b> must be set<br>Minimum Role: Student<br>Route is odatafy compatible, documentation and examples can be found <a href=http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_QueryOptions>here</a>'
      security: 
        - bearerJWT: []
      responses:
        200:
          description: 'ThreadComments'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count: 
                    type: number
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ThreadComment'
                
    post:
      tags:
      - threadcomments
      summary: 'Create a new ThreadComment'
      description: 'Minimum Role: Student'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThreadComment'
      responses:
        201:
          description: '<b>Authorization: Bearer \<JWT\></b> must be set<br>ThreadComment created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThreadComment'
                
                
  /threadcomments/{threadcommentId}:
    get:
      tags:
      - threadcomments
      summary: 'Get a single ThreadComment'
      parameters: 
        - in: path
          name: threadcommentId
          required: true
          schema:
            type: string
            format: ObjectId
      description: '<b>Authorization: Bearer \<JWT\></b> must be set<br>Minimum Role: Student'
      security: 
        - bearerJWT: []
      responses:
        200:
          description: 'ThreadComment'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThreadComment'
                
    delete:
      tags:
      - threadcomments
      summary: 'Delete a single ThreadComment'
      parameters: 
        - in: path
          name: threadcommentId
          required: true
          schema:
            type: string
            format: ObjectId
      description: '<b>Authorization: Bearer \<JWT\></b> must be set<br>Minimum Role: Lecturer'
      security: 
        - bearerJWT: []
      responses:
        204:
          description: 'ThreadComment deleted'
  
   # Course Routes CRUD Controller
  /courses:
    get:
      tags:
      - courses
      summary: 'Get Courses (Odatafy)'
      description: '<b>Authorization: Bearer \<JWT\></b> must be set<br>Minimum Role: Student<br>Route is odatafy compatible, documentation and examples can be found <a href=http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_QueryOptions>here</a>'
      security: 
        - bearerJWT: []
      responses:
        200:
          description: 'Courses'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count: 
                    type: number
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Course'
                      
    post:
      tags:
      - courses
      summary: 'Create a new Course'
      description: '<b>Authorization: Bearer \<JWT\></b> must be set<br>Minimum Role: Lecturer'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
      responses:
        201:
          description: 'Course created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
                
  /courses/{courseId}:
    parameters: 
      - in: path
        name: courseId
        required: true
        schema:
          type: string
          format: ObjectId
    get:
      tags:
      - courses
      summary: 'Get a single Course'
      description: '<b>Authorization: Bearer \<JWT\></b> must be set<br>Minimum Role: Student'
      security: 
        - bearerJWT: []
      responses:
        200:
          description: 'Courses'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
                
    put:
      tags:
      - courses
      summary: 'Update a Course'
      description: '<b>Authorization: Bearer \<JWT\></b> must be set<br>Minimum Role: Lecturer<br>course is immutable'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
      responses:
        200:
          description: 'Course updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
                
    delete:
      tags:
      - courses
      summary: 'Delete a single course'
      description: '<b>Authorization: Bearer \<JWT\></b> must be set<br>Minimum Role: Lecturer'
      security: 
        - bearerJWT: []
      responses:
        204:
          description: 'Course deleted'
          
  # Survey Routes CRUD Controller
  /surveys:
    get:
      tags:
      - surveys
      summary: 'Get Surveys (Odatafy)'
      description: '<b>Authorization: Bearer \<JWT\></b> must be set<br>Minimum Role: Student<br>Route is odatafy compatible, documentation and examples can be found <a href=http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_QueryOptions>here</a>'
      security: 
        - bearerJWT: []
      responses:
        200:
          description: 'Surveys'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count: 
                    type: number
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Survey'
                  
                
    post:
      tags:
      - surveys
      summary: 'Create a new Survey'
      description: '<b>Authorization: Bearer \<JWT\></b> must be set<br>Minimum Role: Lecturer'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Survey'
      responses:
        201:
          description: 'Survey created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Survey'
                
  /surveys/{surveyId}:
    parameters: 
      - in: path
        name: surveyId
        required: true
        schema:
          type: string
          format: ObjectId
    get:
      tags:
      - surveys
      summary: 'Get a single Survey'
      description: '<b>Authorization: Bearer \<JWT\></b> must be set<br>Minimum Role: Student'
      security: 
        - bearerJWT: []
      responses:
        200:
          description: 'Survey'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Survey'
                
    put:
      tags:
      - surveys
      summary: 'Update a Survey'
      description: '<b>Authorization: Bearer \<JWT\></b> must be set<br>Minimum Role: Lecturer'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Survey'
      responses:
        200:
          description: 'Survey updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Survey'
                
    delete:
      tags:
      - surveys
      summary: 'Delete a single survey'
      description: '<b>Authorization: Bearer \<JWT\></b> must be set<br>Minimum Role: Lecturer'
      security: 
        - bearerJWT: []
      responses:
        204:
          description: 'Survey deleted'
  
  /surveys/{surveyId}/answers:
    parameters: 
      - in: path
        name: surveyId
        required: true
        schema:
          type: string
          format: ObjectId
    post:
      tags:
      - surveys
      summary: 'Submit a survey answer'
      description: '<b>Authorization: Bearer \<JWT\></b> must be set<br>Minimum Role: Student'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                answer:
                  description: 'Answer that conforms with jsonschema of answerType'
      responses:
        204:
          description: 'Answer submitted'
  
  /trophys:
    get:
      summary: 'get all available trophys'
      tags:
        - trophys
      responses:
        200:
          description: 'Answer submitted'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Trophy'
                  length:
                    type: number
  
  /usertrophys:
    get:
      summary: 'get all user trophys for that user'
      tags:
        - usertrophys
      responses:
        200:
          description: 'Answer submitted'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserTrophy'
                  length:
                    type: number
  /usertrophys/{name}:
    get:
      summary: 'get single user trophys by trophy name'
      parameters:
      - name: name
        required: true
        in: path
        schema:
          type: string
      tags:
        - usertrophys
      responses:
        200:
          description: 'Answer submitted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTrophy'

components:
  securitySchemes:
    bearerJWT:            
      type: http
      scheme: bearer
      bearerFormat: JWT  
        
  schemas:
    Course:
      type: object
      required:
      - name
      - start
      - end
      - progressType
      properties:
        name:
          type: string
        owner: 
          readOnly: true
          description: 'if user is an Admin he needs to set owner explicitly'
          oneOf:
          - type: string
            format: ObjectId
          - $ref: '#/components/schemas/User'
        members:
          type: array
          items:
            oneOf:
            - type: string
              format: ObjectId
            - $ref: '#/components/schemas/User'
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        color:
          type: string
        progressType:
          type: string
          enum: [ 'ByDate' ]
        deleted:
          type: number
          readOnly: true
    Thread:
      type: object
      description: 'A Thread with Threadcomments, representing a conversation'
      required:
      - course
      - title
      - createdBy
      - createdAt
      properties:
        _id:
          type: integer
          readOnly: true
        course:
          oneOf:
          - type: string
            format: ObjectId
          - $ref: '#/components/schemas/Course'
        createdAt:
          type: string
          format: Date
          readOnly: true
        createdBy:
          type: string
          format: ObjectId
          readOnly: true
        title:
          type: string
        description:
          type: string
          nullable: true
    ThreadComment:
      type: object
      required:
      - message
      - thread
      properties:
        _id:
          type: string
          format: ObjectId
          readOnly: true
        createdAt:
          type: string
          format: Date
          readOnly: true
        createdBy:
          type: string
          format: ObjectId
          readOnly: true
        createdByOwner: 
          type: boolean
          readOnly: true
          description: 'Indicates if the ThreadComment has been created by the Course Owner'
        message:
          type: string
        thread:
          oneOf:
          - type: string
            format: ObjectId
          - $ref: '#/components/schemas/Thread'
    User:
      type: object
      required:
      - name
      - email
      - password
      properties:
        _id:
          type: string
          format: ObjectId
          readOnly: true
        name:
          type: string
        email:
          type: string
        password:
          type: string
          writeOnly: true
        role:
          type: string
          enum: [ 'Student', 'Lecturer', 'Admin' ]
          readOnly: true
        profilePicture:
          type: string
          nullable: true
    Survey:
      type: object
      description: 'Is mapped to individual users via survey answers'
      required:
      - title
      - description
      - answerType
      properties:
        title:
          type: string
        description:
          type: string
        users:
          type: array
          items:
            oneOf:
              - type: string
                format: ObjectId
              - $ref: '#/components/schemas/User'
        answerType:
          format: jsonschema
          description: 'Type of answer as jsonschema'
        answers:
          type: array
          items:
            type: object
            required:
            - user
            - answer
            properties:
              user:
                oneOf:
                - type: string
                  format: ObjectId
                - $ref: '#/components/schemas/User'
              answer:
                description: 'Any Data that conforms with answerType'
        deleted:
          type: boolean
          readOnly: true
        createdBy:
          readOnly: true
          description: 'if survey is created by Admin has to be set explicitly'
          oneOf:
          - type: string
            format: ObjectId
          - $ref: '#/components/schemas/Thread'
          
    Notification:
      type: object
      required:
      - user
      - title
      - message
      - read
      properties:
        _id:
          type: string
          format: ObjectId
          readOnly: true
        user:
          oneOf:
          - type: string
            format: ObjectId
          - $ref: '#/components/schemas/User'
        title:
          type: string
        message:
          type: string
        read:
          type: boolean
          readOnly: true
          default: false
          description: 'Indicate if user has read a notification via a GET request'
    
    Trophy:
      type: object
      required:
      - identifier
      - description
      properties:
        identifier:
          type: string
          enum: [ "CreateThreadComment", "SubmitSurveyAnswer", "ReadNotification" ]
        description:
          type: string
        tiers:
          type: array
          items:
            type: object
            properties:
              tier:
                type: integer
                enum: [ 0, 1, 2, 3 ]
              description:
                type: string
    
    UserTrophy:
      type: object
      required:
      - trophy
      - tier
      - user
      properties:
        trophy:
          type: string
          enum: [ "CreateThreadComment", "SubmitSurveyAnswer", "ReadNotification" ]
        tier:
          type: integer
          enum: [ 0, 1, 2, 3 ]
        user:
          oneOf:
          - type: string
            format: ObjectId
          - $ref: '#/components/schemas/User'
    