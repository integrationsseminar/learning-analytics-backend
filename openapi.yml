openapi: 3.0.0
servers:
  - url: https://learninganalytics.gang-of-fork.de
info:
  description: 'Learning Analytics API Documentation'
  version: '1.0.0'
  title: 'Learning Analytics API '
  contact:
    email: 'support@gang-of-fork.de'
tags:
- name: auth
  description: 'Routes about authentication'
- name: users
  description: 'Routes about users'
- name: misc
  description: 'Miscellaneous routes'
- name: threads
  description: 'Routes about threads'
paths:
  /ping:
    get:
      tags: 
        - misc
      summary: 'Check if application is up'
      responses:
        200:
          description: 'Application is up'
          content:
            text/plain:
              example: 'pong'
  
  /auth/register/{courseId}:
    post:
      tags:
      - auth
      parameters:
      - in: path
        name: courseId
        required: true
        schema:
          type: string
      summary: 'Create a new user (student) and assign to a course'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: 'User created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
                
  /auth/login/{courseId}:
    post:
      tags:
      - auth
      parameters:
      - in: path
        name: courseId
        required: true
        schema:
          type: string
      summary: 'Login a user and assign to a course'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: 
                email: 
                  type: string
                password: 
                  type: string
      responses:
        200:
          description: 'User logged in'
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                  token: 
                    type: object
                    properties:
                      expiresIn: 
                        type: number
                      token: 
                        type: string
                        format: JWT
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MzUyOTMzOTE4ZmI3OWQzNGNmODk4ZjIiLCJyb2xlIjoiU3R1ZGVudCIsImlhdCI6MTY2NjM1Njg5NSwiZXhwIjoxNjY2MzcxMjk1fQ.2-sxoJ7lKMFh5Tu3r8lH07jpw6He8-KXznQh8wK7-lw
                        
  /auth/login:
    post:
      tags:
      - auth
      summary: 'Login a user'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: 
                email: 
                  type: string
                password: 
                  type: string
      responses:
        200:
          description: 'User logged in'
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                  token: 
                    type: object
                    properties:
                      expiresIn: 
                        type: number
                      token: 
                        type: string
                        format: JWT
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MzUyOTMzOTE4ZmI3OWQzNGNmODk4ZjIiLCJyb2xlIjoiU3R1ZGVudCIsImlhdCI6MTY2NjM1Njg5NSwiZXhwIjoxNjY2MzcxMjk1fQ.2-sxoJ7lKMFh5Tu3r8lH07jpw6He8-KXznQh8wK7-lw
                        
  /users/my: 
    get:
      tags:
      - users
      summary: 'Get Logged In User'
      security: 
        - bearerJWT: []
      parameters: 
        - $ref: '#/components/parameters/bearerJWT'
      responses:
        200:
          description: 'User'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  
  # Thread Routes Odatafy
  
  /threads:
    get:
      tags:
      - threads
      summary: 'Get Threads (Odatafy)'
      parameters: 
        - $ref: '#/components/parameters/bearerJWT'
      description: 'Minimum Role: Student<br>Route is odatafy compatible, documentation and examples can be found <a href=http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_QueryOptions>here</a>'
      security: 
        - bearerJWT: []
      responses:
        200:
          description: 'User'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thread'
                
    post:
      tags:
      - threads
      parameters: 
        - $ref: '#/components/parameters/bearerJWT'
      summary: 'Create a new Thread'
      description: 'Minimum Role: Student'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Thread'
      responses:
        201:
          description: 'Thread created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thread'
                
                
  /threads/{threadId}:
    get:
      tags:
      - threads
      summary: 'Get a single Thread'
      parameters: 
        - $ref: '#/components/parameters/bearerJWT'
        - in: path
          name: threadId
          required: true
          schema:
            type: string
            format: ObjectId
      description: 'Minimum Role: Student'
      security: 
        - bearerJWT: []
      responses:
        200:
          description: 'Thread'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thread'
                
    put:
      tags:
      - threads
      parameters: 
        - $ref: '#/components/parameters/bearerJWT'
        - in: path
          name: threadId
          required: true
          schema:
            type: string
            format: ObjectId
      summary: 'Update a Thread'
      description: 'Minimum Role: Student<br>course is immutable'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Thread'
      responses:
        200:
          description: 'Thread created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thread'
                
    delete:
      tags:
      - threads
      summary: 'Delete a single thread'
      parameters: 
        - $ref: '#/components/parameters/bearerJWT'
        - in: path
          name: threadId
          required: true
          schema:
            type: string
            format: ObjectId
      description: 'Minimum Role: Lecturer'
      security: 
        - bearerJWT: []
      responses:
        204:
          description: 'Thread'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thread'
    
      
      
              
              
  
components:
  securitySchemes:
    bearerJWT:            
      type: http
      scheme: bearer
      bearerFormat: JWT  
  parameters: 
    bearerJWT:
      in: header
      name: Authorization
      schema:
        type: string
        format: JWT
        example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MzUyOTMzOTE4ZmI3OWQzNGNmODk4ZjIiLCJyb2xlIjoiU3R1ZGVudCIsImlhdCI6MTY2NjM1Njg5NSwiZXhwIjoxNjY2MzcxMjk1fQ.2-sxoJ7lKMFh5Tu3r8lH07jpw6He8-KXznQh8wK7-lw
      required: true
        
  schemas:
    Course:
      type: object
      required:
      - name
      - start
      - end
      - progressType
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        color:
          type: string
          nullable: true
        progressType:
          type: string
          enum: [ 'ByDate' ]
        progress:
          type: number
          readOnly: true
    Thread:
      type: object
      description: 'A Thread with Threadcomments, representing a conversation'
      required:
      - course
      - title
      - createdBy
      - createdAt
      properties:
        _id:
          type: integer
          readOnly: true
        course:
          oneOf:
          - type: string
            format: ObjectId
          - $ref: '#/components/schemas/Course'
        createdAt:
          type: string
          readOnly: true
        createdBy:
          type: string
          format: ObjectId
          readOnly: true
        title:
          type: string
        description:
          type: string
          nullable: true
    ThreadComment:
      type: object
      description: 'Belongs to thread via threadId'
      required:
      - message
      - threadId
      properties:
        id:
          type: integer
          readOnly: true
        createdAt:
          type: string
          readOnly: true
        createdBy:
          type: integer
          readOnly: true
        message:
          type: string
        threadId:
          type: integer
    User:
      type: object
      required:
      - name
      - email
      - password
      properties:
        _id:
          type: string
          format: ObjectId
          readOnly: true
        name:
          type: string
        email:
          type: string
        password:
          type: string
          writeOnly: true
        role:
          type: string
          enum: [ 'Student', 'Lecturer', 'Admin' ]
          readOnly: true
        profilePicture:
          type: string
          nullable: true
    Survey:
      type: object
      description: 'Is mapped to individual users via survey answers'
      required:
      - type
      - question
      - start
      - end
      properties:
        id:
          type: integer
          readOnly: true
        type:
          type: string
          enum: [ 'Text' ]
        question:
          type: string
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        courseId:
          type: integer
          nullable: true
          description: 'optional, only set when survey belongs to course'
    SurveyAnswer:
      type: object
      description: 'Belongs to survey via surveyId and to user via userId. All Answers are created with null as value when a survey is created.'
      required:
      - surveyId
      - userId
      - value
      properties:
        id:
          type: integer
          readOnly: true
        surveyId:
          type: integer
        userId:
          type: integer
        value:
          type: string
          nullable: true
    Notification:
      type: object
      description: 'Belongs to user via userId'
      required:
      - userId
      - title
      - message
      - senderId
      - read
      properties:
        id:
          type: integer
          readOnly: true
        userId:
          type: integer
        title:
          type: string
        message:
          type: string
          nullable: true
        senderId:
          type: integer
        read:
          type: boolean
          readOnly: true
          default: false
          description: 'Indicate if user has read a notification via a GET request'

        
        
        