openapi: 3.0.0
servers:
  - url: https://learninganalytics.gang-of-fork.de
info:
  description: 'Learning Analytics API Documentation'
  version: '1.0.0'
  title: 'Learning Analytics API '
  contact:
    email: 'support@gang-of-fork.de'
tags:
- name: user
  description: 'Routes for all registered users (may be restricted by data ownership)'
- name: lecturer
  description: 'Routes for lecuterers'
- name: admin
  description: 'Routes for admins'
paths:
  /ping:
    get:
      summary: 'Check if application is up'
      responses:
        200:
          description: 'Application is up'
          content:
            text/plain:
              example: 'pong'
  
  /courses:
    get:
      tags:
      - user
      summary: 'Get a list of all courses for the loggged in user'
      security:
      - session_id: []
      parameters:
      - $ref: '#/components/parameters/paginationTop'
      - $ref: '#/components/parameters/paginationSkip'
      responses:
        200:
          description: 'List of all courses'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Course'
                  count:
                    type: integer
                    description: 'count of all available items'
    post:
      tags:
      - lecturer
      summary: 'Create a new course'
      security:
      - session_id: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
      responses:
        201:
          description: 'Course created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
  /courses/{courseId}:
    parameters:
    - in: path
      name: courseId
      required: true
      schema:
        type: string
    put:
      tags:
      - lecturer
      summary: 'Update a course'
      security:
      - session_id: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
      responses:
        200:
          description: 'Course updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
    delete:
      tags:
      - lecturer
      summary: 'Delete a course'
      security:
      - session_id: []
      responses:
        204:
          description: 'Course deleted'
          content:
            application/json:
              schema:
                type: object
                
  /courses/{courseId}/threads:
    parameters:
    - in: path
      name: courseId
      required: true
      schema:
        type: integer
    get:
      tags:
      - user
      summary: 'Get a list of all threads for a course'
      security:
      - session_id: []
      parameters:
      - $ref: '#/components/parameters/paginationTop'
      - $ref: '#/components/parameters/paginationSkip'
      responses:
        200:
          description: 'List of all threads'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Thread'
                  count:
                    type: integer
                    description: 'count of all available items'
                    
  
  
  /threads:
    post:
      tags:
      - user
      summary: 'Create a new thread'
      security:
      - session_id: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Thread'
      responses:
        201:
          description: 'Course created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
  /threads/{threadId}:
    parameters:
    - in: path
      name: threadId
      required: true
      schema:
        type: integer
    put:
      tags:
      - user
      summary: 'Update a thread'
      description: 'Only the user who created a thread can update it'
      security:
      - session_id: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Thread'
      responses:
        200:
          description: 'Thread updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
    delete:
      tags:
      - user
      summary: 'Delete a thread'
      description: 'Only the user who created a thread can delete it'
      security:
      - session_id: []
      responses:
        204:
          description: 'Thread deleted'
          content:
            application/json:
              schema:
                type: object
  
  /threads/{threadId}/threadcomments:
    parameters:
    - in: path
      name: threadId
      required: true
      schema:
        type: integer
    get:
      tags:
      - user
      summary: 'Get a list of all threadcomments for a thread'
      security:
      - session_id: []
      parameters:
      - $ref: '#/components/parameters/paginationTop'
      - $ref: '#/components/parameters/paginationSkip'
      responses:
        200:
          description: 'List of all threads'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ThreadComment'
                  count:
                    type: integer
                    description: 'count of all available items'
  /threadcomments:
    post:
      tags:
      - user
      summary: 'Create a new threadcomment'
      security:
      - session_id: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThreadComment'
      responses:
        201:
          description: 'Course created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThreadComment'
                
  /threadcomments/{threadcommentId}:
    parameters:
    - in: path
      name: threadcommentId
      required: true
      schema:
        type: integer
    put:
      tags:
      - user
      summary: 'Update a threadcomment'
      description: 'Only the user who created a threadcomment can update it'
      security:
      - session_id: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThreadComment'
      responses:
        200:
          description: 'Thread updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThreadComment'
    delete:
      tags:
      - user
      summary: 'Delete a threadcomment'
      description: 'Only the user who created a threadcomment can delete it'
      security:
      - session_id: []
      responses:
        204:
          description: 'Threadcomment deleted'
          content:
            application/json:
              schema:
                type: object
                    
  /courses/{courseId}/surveys:
    get:
      tags:
      - user
      summary: 'Get a list of all surveys for a course'
      security:
      - session_id: []
      parameters:
      - in: path
        name: courseId
        required: true
        schema:
          type: integer
      - $ref: '#/components/parameters/paginationTop'
      - $ref: '#/components/parameters/paginationSkip'
      responses:
        200:
          description: 'List of all surveys'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Survey'
                  count:
                    type: integer
                    description: 'count of all available items'
  /surveys:
    get:
      tags:
      - user
      summary: 'Get a list of all surveys a user has access to'
      security:
      - session_id: []
      parameters:
      - $ref: '#/components/parameters/paginationTop'
      - $ref: '#/components/parameters/paginationSkip'
      responses:
        200:
          description: 'List of all surveys'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Survey'
                  count:
                    type: integer
                    description: 'count of all available items'
    
    post:
      tags:
      - user
      summary: 'Create a new survey'
      security:
      - session_id: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Survey'
      responses:
        201:
          description: 'Survey created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Survey'
  /survey/{surveyId}:
    parameters:
    - in: path
      name: surveyId
      required: true
      schema:
        type: integer
    put:
      tags:
      - user
      summary: 'Update a survey'
      description: 'Only the user who created a survey can update it'
      security:
      - session_id: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Survey'
      responses:
        200:
          description: 'Survey updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Survey'
    delete:
      tags:
      - user
      summary: 'Delete a survey'
      description: 'Only the user who created a survey can delete it'
      security:
      - session_id: []
      responses:
        204:
          description: 'Survey created'
          content:
            application/json:
              schema:
                type: object
                
  /survey/{surveyId}/submit:
    parameters:
    - in: path
      name: surveyId
      required: true
      schema:
        type: integer
    post:
      tags:
      - user
      summary: 'Submit a survey answer'
      security:
      - session_id: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - value
              properties:
                value:
                  type: string
      responses:
        201:
          description: 'Survey submitted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SurveyAnswer'
                
  /courses/{courseId}/users:
    parameters:
    - in: path
      name: courseId
      required: true
      schema:
        type: integer
    get:
      tags:
      - user
      summary: 'Get a list of all users for a course'
      security:
      - session_id: []
      parameters:
      - $ref: '#/components/parameters/paginationTop'
      - $ref: '#/components/parameters/paginationSkip'
      responses:
        200:
          description: 'List of all users'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  count:
                    type: integer
                    description: 'count of all available items'
    post:
        tags:
        - lecturer
        summary: 'Create new user mappings for a course'
        description: 'Only Lecturers that create a course can add users to a course'
        security:
        - session_id: []
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items: 
                      type: number
                      description: userIDs
        responses:
          200:
            description: 'User Mapping added'
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    users:
                      type: array
                      items: 
                        type: number
                        description: userIDs
  /courses/{courseId}/users/{userId}:
    parameters:
    - in: path
      name: courseId
      required: true
      schema:
        type: integer
    - in: path
      name: userId
      required: true
      schema:
        type: integer
    delete:
      tags:
      - lecturer
      summary: 'Delete a user mapping for a course'
      description: 'Only the lecturer who created a course can remove users from it'
      security:
      - session_id: []
      responses:
        204:
          description: 'Mapping deleted'
          content:
            application/json:
              schema:
                type: object
    
  /users:
    post:
      tags:
      - admin
      summary: 'Create a new user'
      security:
      - session_id: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: 'User created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{userId}:
    parameters:
    - in: path
      name: userId
      required: true
      schema:
        type: string
    put:
      tags:
      - user
      summary: 'Update a user'
      description: 'User can only update their own data'
      security:
      - session_id: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: 'User updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      tags:
      - admin
      summary: 'Delete a user'
      security:
      - session_id: []
      responses:
        204:
          description: 'User deleted'
          content:
            application/json:
              schema:
                type: object
  
  /notifications:
    get:
      tags:
      - user
      summary: 'Get a list of all notifications for the loggged in user'
      description: 'All notifications that are read via this route get read filed set to true'
      security:
      - session_id: []
      parameters:
      - $ref: '#/components/parameters/paginationTop'
      - $ref: '#/components/parameters/paginationSkip'
      responses:
        200:
          description: 'list of all notifications'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notification'
                  count:
                    type: integer
                    description: 'count of all available items'
              
              
  
components:
  securitySchemes:
    session_id:
      type: 'apiKey'
      name: 'Authorization'
      in: 'header'
  parameters:
    paginationTop:
      in: query
      name: top
      required: false
      schema:
        type: integer
    paginationSkip:
      in: query
      name: skip
      required: false
      schema:
        type: integer
  schemas:
    Course:
      type: object
      required:
      - name
      - start
      - end
      - progressType
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        color:
          type: string
          nullable: true
        progressType:
          type: string
          enum: [ 'ByDate' ]
        progress:
          type: number
          readOnly: true
    Thread:
      type: object
      description: 'Belongs to course via courseId'
      required:
      - courseId
      - title
      properties:
        id:
          type: integer
          readOnly: true
        courseId:
          type: integer
        createdAt:
          type: string
          readOnly: true
        createdBy:
          type: integer
          readOnly: true
        title:
          type: string
        description:
          type: string
          nullable: true
    ThreadComment:
      type: object
      description: 'Belongs to thread via threadId'
      required:
      - message
      - threadId
      properties:
        id:
          type: integer
          readOnly: true
        createdAt:
          type: string
          readOnly: true
        createdBy:
          type: integer
          readOnly: true
        message:
          type: string
        threadId:
          type: integer
    User:
      type: object
      description: 'Mapping from users to courses is done via userToCourse helper table (n -> m)'
      required:
      - name
      - email
      - password
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        email:
          type: string
        password:
          type: string
          writeOnly: true
        role:
          type: string
          enum: [ 'Student', 'Lecturer', 'Admin' ]
        profilePicture:
          type: string
          nullable: true
    Survey:
      type: object
      description: 'Is mapped to individual users via survey answers'
      required:
      - type
      - question
      - start
      - end
      properties:
        id:
          type: integer
          readOnly: true
        type:
          type: string
          enum: [ 'Text' ]
        question:
          type: string
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        courseId:
          type: integer
          nullable: true
          description: 'optional, only set when survey belongs to course'
    SurveyAnswer:
      type: object
      description: 'Belongs to survey via surveyId and to user via userId. All Answers are created with null as value when a survey is created.'
      required:
      - surveyId
      - userId
      - value
      properties:
        id:
          type: integer
          readOnly: true
        surveyId:
          type: integer
        userId:
          type: integer
        value:
          type: string
          nullable: true
    Notification:
      type: object
      description: 'Belongs to user via userId'
      required:
      - userId
      - title
      - message
      - senderId
      - read
      properties:
        id:
          type: integer
          readOnly: true
        userId:
          type: integer
        title:
          type: string
        message:
          type: string
          nullable: true
        senderId:
          type: integer
        read:
          type: boolean
          readOnly: true
          default: false
          description: 'Indicate if user has read a notification via a GET request'

        
        
        